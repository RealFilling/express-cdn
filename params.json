{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-33131011-1","body":"\r\n# express-cdn <sup>0.0.8</sup>\r\n\r\nNode.js module for delivering optimized, minified, mangled, gzipped, and CDN-hosted assets in Express (currently by Amazon S3 and Amazon CloudFront).\r\n\r\nFollow <a href=\"http://twitter.com/niftylettuce\" target=\"_blank\">@niftylettuce</a> on Twitter for updates.\r\n\r\nLike this module?  Check out <a href=\"https://github.com/niftylettuce/node-email-templates\" target=\"_blank\">node-email-templates</a>!\r\n\r\n\r\n## Index\r\n\r\n- [Compatibility](#compatibility)\r\n- [Changelog](#changelog)\r\n- [Features](#features)\r\n- [Add-On Modules](#addon)\r\n- [Lazy Web Requests](#requests)\r\n- [How Does It Work?](#how)\r\n- [Environment Differences](#environment)\r\n- [CDN Setup Instructions](#cdn-setup)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Optional Features](#optional)\r\n  - [Using A Custom Logger](#optional-logger)\r\n- [Contributors](#contributors)\r\n- [License](#license)\r\n\r\n\r\n## Compatibility\r\n\r\nThis module is compatible with Express versions `2.x.x` and `3.x.x`.\r\n\r\n\r\n## Changelog\r\n\r\n* `0.0.8`: Enabled string-only output for CDN assets.\r\n\r\n**Example**:\r\n```jade\r\n- var href = CDN('/img/full/foo.jpg', { raw : true });\r\na(class=\"fancybox\", href=\"#{href}\")\r\n  != CDN('/img/small/foo.jpg', { alt : 'Foo', width : 800, height : 600 })\r\n```\r\n\r\n* `0.0.7`: Removed CSS minification due to over-optimization of the `clean-css` module.\r\n\r\n* `0.0.6`: Added temporary support for CSS usage of `background-image`, `background`, and `contents` attributes by absolute image paths.\r\n\r\n**Example**:\r\n```css\r\n/* Valid - Proper way to write CSS with express-cdn */\r\n#example-valid {\r\n  background: url(/something.png);\r\n}\r\n\r\n/* Invalid - Don't do this! */\r\n#example-invalid {\r\n  background: url(../something.png);\r\n}\r\n```\r\n\r\n\r\n## Features\r\n\r\n* Automatic parsing of `background`, `background-image` and `content` for `url({{absoluteUrl}})` in stylesheets and scripts.\r\n* Built-in optimization of images in production mode using [OptiPNG][1] and [JPEGTran][2].\r\n* Supports [Sass][3], [LESS][4], and [Stylus][5] using respective stylesheet compilers.\r\n* JavaScript assets are mangled and minified using [UglifyJS][6].\r\n* Automatic detection of asset changes and will only upload changed assets to S3 in production mode.\r\n* Utilizes cachebusting, which is inspired by [express-cachebuster][7] and [h5bp][8].\r\n* All assets are compressed using [zlib][9] into a gzip buffer for S3 uploading with `Content-Encoding` header set to `gzip`.\r\n* Embed multiple assets as a single `<script>` or `<link>` tag using the built-in dynamic view helper.\r\n* Loads and processes assets per view (allowing you to minimize client HTTP requests).\r\n* Combine commonly used assets together using a simple array argument.\r\n* Uploads changed assets automatically and asynchronously to Amazon S3 (only in production mode) using [knox][10].\r\n\r\n\r\n## Add-on Modules (coming soon)\r\n\r\n* [express-cdn-cloudfront][13] - Amazon S3 and Amazon CloudFront\r\n* [express-cdn-maxcdn][14] - MaxCDN and Amazon S3\r\n* [express-cdn-cloudfiles][15] - Rackspace CloudFiles\r\n* [express-cdn-cloudflare][16] - CloudFlare and Amazon S3\r\n\r\n## Lazy Web Requests\r\n\r\n* Add options to pick CDN network (e.g. MaxCDN vs. Amazon vs. Rackspace)\r\n* Add tests for all asset types.\r\n* Modularization of `/lib/main.js` please!\r\n* Support Express 3.x.x+ and utilize async with view helper.\r\n* Convert from `fs.statSync` to `fs.stat` with callback for image assets modified timestamp hack.\r\n* Investigate why Chrome Tools Audit returns leverage proxy cookieless jargon.\r\n\r\n\r\n## How does it work?\r\n\r\nWhen the server is first started, the module returns a view helper depending on\r\nthe server environment (production or development).  It also recursively\r\nsearches through your `viewsDir` for any views containing instances of the\r\n`CDN(...)` view helper.  After parsing each instance and removing duplicates,\r\nit will use your S3 credentials to upload a new copy of the production-quality\r\nassets.  Enjoy **:)**.\r\n\r\n\r\n## Environment Differences\r\n\r\n**Development Mode:**\r\n\r\nAssets are untouched, cachebusted, and delivered as typical local files for rapid development.\r\n\r\n**Production Mode:**\r\n\r\nAssets are optimized, minified, mangled, gzipped, delivered by Amazon CloudFront CDN, and hosted from Amazon S3.\r\n\r\n\r\n## CDN Setup Instructions\r\n\r\n1. Visit <https://console.aws.amazon.com/s3/home> and click **Create Bucket**.\r\n  * Bucket Name: `bucket-name`\r\n  * Region: `US Standard`\r\n2. Upload <a href=\"https://raw.github.com/niftylettuce/express-cdn/master/index.html\">index.html</a> to your new bucket (this will serve as a placeholder in case someone accesses <http://cdn.your-site.com/>).\r\n3. Select `index.html` in the Objects and Folders view from your S3 console and click **Actions &rarr; Make Public**.\r\n4. Visit <https://console.aws.amazon.com/cloudfront/home> and click **Create Distribution**.\r\n  * Choose an origin:\r\n      - Origin Domain Name: `bucket-name.s3.amazonaws.com`\r\n      - Origin ID: `S3-bucket-name`\r\n  * Create default behavior:\r\n      - Path Pattern: `Default (*)`\r\n      - Origin: `S3-bucket-name`\r\n      - Viewer Protocol Policy: `HTTP and HTTPS`\r\n      - Object Caching: `Use Origin Cache Headers`\r\n      - Forward Query String: `No (Improves Caching)`\r\n  * Distribution details:\r\n      - Alternate Domain Names (CNAMEs): `cdn.your-domain.com`\r\n      - Default Root Object: `index.html`\r\n      - Logging: `Off`\r\n      - Comments: `Created with express-cdn by @niftylettuce.`\r\n      - Distribution State: `Enabled`\r\n5. Copy the generated Domain Name (e.g. `xyz.cloudfront.net`) to your clipboard.\r\n6. Log in to your-domain.com's DNS manager, add a new CNAME \"hostname\" of `cdn`, and paste the contents of your clipboard as the the \"alias\" or \"points to\" value.\r\n7. After the DNS change propagates, you can test your new CDN by visiting <http://cdn.your-domain.com> (the `index.html` file should get displayed).\r\n\r\n\r\n## Installation\r\n\r\n### Install Dependencies\r\n\r\n##### Linux\r\n```bash\r\n# install optipng and jpegtran packages\r\nsudo apt-get install optipng libjpeg-progs\r\n```\r\n\r\n##### OS X (with [Homebrew][11])\r\n```bash\r\n# install optipng and jpegtran packages\r\nbrew install optipng libjpeg\r\n```\r\n\r\n### Install express-cdn module\r\n```bash\r\nnpm install express-cdn\r\n```\r\n\r\n## Usage\r\n\r\n### Server\r\n\r\n```js\r\n// # express-cdn\r\n\r\nvar express = require('express')\r\n  , path    = require('path')\r\n  , app     = express.createServer()\r\n  , semver  = require('semver');\r\n\r\n// Set the CDN options\r\nvar options = {\r\n    publicDir  : path.join(__dirname, 'public')\r\n  , viewsDir   : path.join(__dirname, 'views')\r\n  , domain     : 'cdn.your-domain.com'\r\n  , bucket     : 'bucket-name'\r\n  , key        : 'amazon-s3-key'\r\n  , secret     : 'amazon-s3-secret'\r\n  , hostname   : 'localhost'\r\n  , port       : 1337\r\n  , ssl        : false\r\n  , production : true\r\n};\r\n\r\n// Initialize the CDN magic\r\nvar CDN = require('express-cdn')(app, options);\r\n\r\napp.configure(function() {\r\n  app.set('view engine', 'jade');\r\n  app.set('view options', { layout: false, pretty: true });\r\n  app.enable('view cache');\r\n  app.use(express.bodyParser());\r\n  app.use(express.static(path.join(__dirname, 'public')));\r\n});\r\n\r\n// Add the view helper\r\nif (semver.lt(express.version, '3.0.0')) {\r\n  app.locals({ CDN: CDN() });\r\n} else {\r\n  app.dynamicHelpers({ CDN: CDN });\r\n}\r\n\r\napp.get('/', function(req, res, next) {\r\n  res.render('basic');\r\n  return;\r\n});\r\n\r\nconsole.log(\"Server started: http://localhost:1337\");\r\napp.listen(1337);\r\n```\r\n\r\n### View Engine\r\n\r\n#### Jade\r\n\r\n```jade\r\n// #1 - Load an image\r\n!= CDN('/img/sprite.png')\r\n\r\n// #2 - Load an image with a custom tag attribute\r\n!= CDN('/img/sprite.png', { alt: 'Sprite' })\r\n\r\n// #3 - Load a script\r\n!= CDN('/js/script.js')\r\n\r\n// #4 - Load a script with a custom tag attribute\r\n!= CDN('/js/script.js', { 'data-message': 'Hello' })\r\n\r\n// #5 - Load and concat two scripts\r\n!= CDN([ '/js/plugins.js', '/js/script.js' ])\r\n\r\n// #6 - Load and concat two scripts with custom tag attributes\r\n!= CDN([ '/js/plugins.js', '/js/script.js' ], { 'data-message': 'Hello' })\r\n\r\n// #7 - Load a stylesheet\r\n!= CDN('/css/style.css')\r\n\r\n// #8 - Load and concat two stylesheets\r\n!= CDN([ '/css/style.css', '/css/extra.css' ])\r\n```\r\n\r\n#### EJS\r\n\r\n```ejs\r\n<!-- #1 - Load an image -->\r\n<%- CDN('/img/sprite.png') %>\r\n\r\n<!-- #2 - Load an image with a custom tag attribute -->\r\n<%- CDN('/img/sprite.png', { alt: 'Sprite' }) %>\r\n\r\n<!-- #3 - Load a script -->\r\n<%- CDN('/js/script.js') %>\r\n\r\n<!-- #4 - Load a script with a custom tag attribute -->\r\n<%- CDN('/js/script.js', { 'data-message': 'Hello' }) %>\r\n\r\n<!-- #5 - Load and concat two scripts -->\r\n<%- CDN([ '/js/plugins.js', '/js/script.js' ]) %>\r\n\r\n<!-- #6 - Load and concat two scripts with custom tag attributes -->\r\n<%- CDN([ '/js/plugins.js', '/js/script.js' ], { 'data-message': 'Hello' }) %>\r\n\r\n<!-- #7 - Load a stylesheet -->\r\n<%- CDN('/css/style.css') %>\r\n\r\n<!-- #8 - Load and concat two stylesheets -->\r\n<%- CDN([ '/css/style.css', '/css/extra.css' ]) %>\r\n```\r\n\r\n### Automatically Rendered HTML\r\n\r\n#### Development Mode\r\n\r\n```html\r\n<!-- #1 - Load an image -->\r\n<img src=\"/img/sprite.png?v=1341214029\" />\r\n\r\n<!-- #2 - Load an image with a custom tag attribute -->\r\n<img src=\"/img/sprite.png?v=1341214029\" alt=\"Sprite\" />\r\n\r\n<!-- #3 - Load a script -->\r\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\"></script>\r\n\r\n<!-- #4 - Load a script with a custom tag attribute -->\r\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\" data-message=\"Hello\"></script>\r\n\r\n<!-- #5 - Load and concat two scripts -->\r\n<script src=\"/js/plugins.js?v=1341214029\" type=\"text/javascript\"></script>\r\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\"></script>\r\n\r\n<!-- #6 - Load and concat two scripts with custom tag attributes -->\r\n<script src=\"/js/plugins.js?v=1341214029\" type=\"text/javascript\" data-message=\"Hello\"></script>\r\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\" data-message=\"Hello\"></script>\r\n\r\n<!-- #7 - Load a stylesheet -->\r\n<link href=\"/css/style.css?v=1341214029\" rel=\"stylesheet\" type=\"text/css\" />\r\n\r\n<!-- #8 - Load and concat two stylesheets -->\r\n<link href=\"/css/style.css?v=1341214029\" rel=\"stylesheet\" type=\"text/css\" />\r\n<link href=\"/css/extra.css?v=1341214029\" rel=\"stylesheet\" type=\"text/css\" />\r\n```\r\n\r\n#### Production Mode\r\n\r\nThe protocol will automatically change to \"https\" or \"http\" depending on the SSL option.\r\n\r\nThe module will automatically upload and detect new/modified assets based off timestamp,\r\nas it utilizes the timestamp for version control!  There is built-in magic to detect if\r\nindividual assets were changed when concatenating multiple assets together (it adds the\r\ntimestamps together and checks if the combined asset timestamp on S3 exists!).\r\n\r\n```html\r\n<!-- #1 - Load an image -->\r\n<img src=\"https://cdn.your-site.com/img/sprite.1341382571.png\" />\r\n\r\n<!-- #2 - Load an image with a custom tag attribute -->\r\n<img src=\"https://cdn.your-site.com/img/sprite.1341382571.png\" alt=\"Sprite\" />\r\n\r\n<!-- #3 - Load a script -->\r\n<script src=\"https://cdn.your-site.com/js/script.1341382571.js\" type=\"text/javascript\"></script>\r\n\r\n<!-- #4 - Load a script with a custom tag attribute -->\r\n<script src=\"https://cdn.your-site.com/js/script.1341382571.js\" type=\"text/javascript\" data-message=\"Hello\"></script>\r\n\r\n<!-- #5 - Load and concat two scripts -->\r\n<script src=\"https://cdn.your-site.com/plugins%2Bscript.1341382571.js\" type=\"text/javascript\"></script>\r\n\r\n<!-- #6 - Load and concat two scripts with custom tag attributes -->\r\n<script src=\"https://cdn.your-site.com/plugins%2Bscript.1341382571.js\" type=\"text/javascript\" data-message=\"Hello\"></script>\r\n\r\n<!-- #7 - Load a stylesheet -->\r\n<link href=\"https://cdn.your-site.com/css/style.1341382571.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\r\n<!-- #8 - Load and concat two stylesheets -->\r\n<link href=\"https://cdn.your-site.com/style%2Bextra.1341382571.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n```\r\n\r\n\r\n## Optional Features\r\n\r\n### Using a custom logger\r\n\r\nBy default log messages will be sent to the console. If you would like to use a custom logger function you may pass it in as `options.logger`\r\n\r\nThe example below uses the [Winston][12] logging library.\r\n\r\n```javascript\r\nvar winston = require('winston');\r\nwinston.add(winston.transports.File, {filename: 'somefile.log'});\r\n\r\n// Set the CDN options\r\nvar options = {\r\n    publicDir  : path.join(__dirname, 'public')\r\n  , viewsDir   : path.join(__dirname, 'views')\r\n  , domain     : 'cdn.your-domain.com'\r\n  , bucket     : 'bucket-name'\r\n  , key        : 'amazon-s3-key'\r\n  , secret     : 'amazon-s3-secret'\r\n  , hostname   : 'localhost'\r\n  , port       : 1337\r\n  , ssl        : false\r\n  , production : true\r\n  , logger     : winston.info\r\n};\r\n\r\n// Initialize the CDN magic\r\nvar CDN = require('express-cdn')(app, options);\r\n\r\napp.configure(function() {\r\n  app.set('view engine', 'jade');\r\n  app.set('view options', { layout: false, pretty: true });\r\n  app.enable('view cache');\r\n  app.use(express.bodyParser());\r\n  app.use(express.static(path.join(__dirname, 'public')));\r\n});\r\n\r\n// Add the dynamic view helper\r\napp.dynamicHelpers({ CDN: CDN });\r\n\r\n```\r\nAny output from express-cdn is now passed to `winston.info()` which writes to both `console` and `somefile.log`.\r\n\r\n\r\n## Contributors\r\n\r\n* Nick Baugh <niftylettuce@gmail.com>\r\n* James Wyse <james@jameswyse.net>\r\n* Jon Keating <jon@licq.org>\r\n* Andrew de Andrade <andrew@deandrade.com.br>\r\n* <a href=\"http://www.joshisgross.com\" target=\"_blank\">Joshua Gross</a> <josh@spandex.io>\r\n* Dominik Lessel <info@rocketeleven.com>\r\n\r\n\r\n## License\r\n\r\nMIT Licensed\r\n\r\n[1]: http://optipng.sourceforge.net/\r\n[2]: http://jpegclub.org/jpegtran/\r\n[3]: http://sass-lang.com/\r\n[4]: http://lesscss.org/\r\n[5]: http://learnboost.github.com/stylus/\r\n[6]: https://github.com/mishoo/UglifyJS/\r\n[7]: https://github.com/niftylettuce/express-cachebuster/\r\n[8]: http://h5bp.com/\r\n[9]: http://nodejs.org/api/zlib.html\r\n[10]: https://github.com/LearnBoost/knox/\r\n[11]: https://github.com/mxcl/homebrew/\r\n[12]: https://github.com/flatiron/winston/\r\n[13]: https://github.com/niftylettuce/express-cdn-cloudfront\r\n[14]: https://github.com/niftylettuce/express-cdn-maxcdn\r\n[15]: https://github.com/niftylettuce/express-cdn-cloudfiles\r\n[16]: https://github.com/niftylettuce/express-cdn-cloudflare\r\n","name":"express-cdn","tagline":"Node.js module for delivering optimized, minified, mangled, gzipped, and CDN-hosted assets in Express using S3 and CloudFront."}